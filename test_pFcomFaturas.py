# Generated by Selenium IDE
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import glob
import os
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options


class TestPFcomFaturas:

    def setup_method(self, method):
        download_dir = os.path.abspath("downloads")
        os.makedirs(download_dir, exist_ok=True)

        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_experimental_option("prefs", {
            "download.default_directory": download_dir,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "plugins.always_open_pdf_externally": True,
        })

        chrome_options.binary_location = "/usr/bin/google-chrome"
        chromedriver_path = "/usr/bin/chromedriver"
        service = Service(executable_path=chromedriver_path)
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

        self.wait = WebDriverWait(self.driver, 20)  # espera até 20s por elemento
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    @pytest.mark.parametrize(
        "uc, ano_mes, documento, nome, data_nascimento",
        [
            ("690268117", "2025_SET","701.475.586-20", "CASSIO XAVIER ROCHA", "22/11/1968"),  # CPF
        ]
    )
    def test_pFcomFaturas(self, uc, ano_mes, documento, nome, data_nascimento):

        NomeFatura = f"{ano_mes}_{nome.replace(' ', '_')}_{uc}.pdf"
        download_dir = os.path.abspath("downloads")
        caminho_fatura = os.path.join(download_dir, NomeFatura)

        # Só baixa se o arquivo não existir
        if os.path.exists(caminho_fatura):
            print(f"Arquivo já existe: {caminho_fatura}")
            return

        self.driver.get("https://goias.equatorialenergia.com.br/LoginGO.aspx")
        self.driver.set_window_size(1024, 768)
        self.wait.until(EC.element_to_be_clickable((By.ID, "WEBDOOR_headercorporativogo_txtUC"))).send_keys(uc)
        self.wait.until(EC.element_to_be_clickable((By.ID, "WEBDOOR_headercorporativogo_txtDocumento"))).send_keys(documento)
        self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".button:nth-child(2)"))).click()
        # Só preenche a data de nascimento se ela foi informada (CPF)
        if data_nascimento:
            self.wait.until(EC.element_to_be_clickable((By.ID, "WEBDOOR_headercorporativogo_txtData"))).send_keys(data_nascimento)
            self.wait.until(EC.element_to_be_clickable((By.ID, "WEBDOOR_headercorporativogo_btnValidar"))).click()
        self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".ModalButton"))).click()
        time.sleep(3)
        self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".item:nth-child(1) > label"))).click()
        time.sleep(3)
        self.wait.until(EC.element_to_be_clickable((By.ID, "LinkSegundaVia"))).click()
        tipo_emissao = self.wait.until(EC.element_to_be_clickable((By.ID, "CONTENT_cbTipoEmissao")))
        tipo_emissao.click()
        self.wait.until(EC.element_to_be_clickable((By.XPATH, "//option[. = 'Emitir fatura completa']"))).click()
        motivo = self.wait.until(EC.element_to_be_clickable((By.ID, "CONTENT_cbMotivo")))
        motivo.click()
        self.wait.until(EC.element_to_be_clickable((By.XPATH, "//option[. = 'Não recebeu a fatura']"))).click()
        self.wait.until(EC.element_to_be_clickable((By.ID, "CONTENT_btEnviar"))).click()
        self.wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Download"))).click()
        self.wait.until(EC.element_to_be_clickable((By.ID, "CONTENT_btnModal"))).click()
        time.sleep(5)  # Espera adicional para garantir que o download seja concluído
        # Renomear o arquivo baixado: pega o PDF mais recente da pasta
        pdfs = glob.glob(os.path.join(download_dir, "*.pdf"))
        if not pdfs:
            print("Nenhum arquivo PDF encontrado na pasta de download!")
            return
        # Seleciona o arquivo PDF mais recente
        downloaded_file = max(pdfs, key=os.path.getmtime)
        os.rename(downloaded_file, caminho_fatura)

